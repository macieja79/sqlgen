using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using Metaproject;
using SqlGen.Core;

namespace SqlGen
{
    public class InsertScriptGenerator : IInsertScriptGenerator
    {
        private readonly ISqlQueryEngine _queryEngine;
        private readonly ISqlTableNameResolver _tableNameResolver;
        private readonly ISqlCreateScriptGenerator _createScriptGenerator;
        private readonly IProgress _progress;

        public InsertScriptGenerator(
            ISqlQueryEngine queryEngine, 
            ISqlTableNameResolver tableNameResolver, 
            ISqlCreateScriptGenerator createScriptGenerator,
            IProgress progress
            )
        {
            _queryEngine = queryEngine;
            _tableNameResolver = tableNameResolver;
            _createScriptGenerator = createScriptGenerator;
            _progress = progress;
        }

        #region <IInsertScriptGenerator>

        public SqlScript CreateInsertScript(InsertScriptGeneratorParams parameters)
        {
            var createScriptInfo = new SqlScript();
            var scriptInfo = new SqlScript();

            var sqls = parameters
                .SqlSelectStatement
                .Split(parameters.MultiStatementSeparator.ToSingleElementArray(), StringSplitOptions.RemoveEmptyEntries);

            int sqlsCount = sqls.Length;

            for (int i = 0; i < sqlsCount; i++)
            {
                var sql = sqls[i];
                if (sql.StartsWith("--")) continue;

                var tableName = _tableNameResolver.ResolveTableName(sql);

                var lines = ProcessSingleTable(tableName, parameters.ConnectionString, sql, parameters.ChunkSize);
                scriptInfo.Lines.AddRange(lines);
                
                _progress.Show("Insert", i, sqlsCount);

            }

           
            return scriptInfo;
        }

        #endregion

        #region <prv>

        List<string> ProcessSingleTable(string tableName, string connectionString, string sql, int chunkSize)
        {
            var tb = new TSqlBuilder();
            List<string> lines = new List<string>();

            var result = _queryEngine.Query(connectionString, sql);
           

            tb.Comment($"Generated by SqlGen for {tableName} at {DateTime.Now}");

            if (result.Rows.IsNullOrEmpty())
            {
                tb.Comment("No data found!");
                tb.Go();

                lines = tb.GetContent();
                return lines;
            }

            tb.Comment($"Items: {result.Rows.Count}");
            tb.Blank();
            tb.Message($"Inserting {result.Rows.Count} items into [{tableName}] table...");

            if (result.HasIdentity)
                tb.SetIdentity(tableName, true);

            string columnNames = CreateColumnNamesRow(result.ColumnNames);

            var chunks = result.Rows.ToChunks(chunkSize);
            int numberOfChunks = chunks.Count;
            int iterator = 0;
            foreach (var chunk in chunks)
            {
                tb.Message($"... chunk: {++iterator}/{numberOfChunks}");
                tb.Raw($"INSERT INTO {tableName} {columnNames} VALUES ");
                for (int i = 0; i < chunk.Count; i++)
                {
                    var row = chunk[i];
                    string rowLine = CreateRow(result.ColumnTypes, row);

                    string wholeLine = string.Empty;
                    if (chunk.IsLastIndex(i))
                    {
                        wholeLine = $"{rowLine};";
                        tb.Raw(wholeLine);
                        tb.Go();
                        tb.Blank();
                    }
                    else
                    {
                        wholeLine = $"{rowLine},";
                        tb.Raw(wholeLine);
                    }

                }
            }

            if (result.HasIdentity)
                tb.SetIdentity(tableName, false);

            tb.Message("Done!");
            lines = tb.GetContent();

            return lines;
        }

        string CreateColumnNamesRow(List<string> headers)
        {
            var headerWithBrackets = headers
                .Select(header => $"[{header}]")
                .ToArray();

            var joined = headerWithBrackets.Join(", ");

            var output = $"({joined})";
            return output;
        }

        string CreateRow(List<string> columnTypes, SqlQueryResultRow row)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append('(');

            for (int i = 0; i < row.Values.Count; i++)
            {
                string columnType = columnTypes[i];
                string value = ResolveValue(columnType, row.Values[i]);
                sb.Append(value);

                if (!row.Values.IsLastIndex(i))
                    sb.Append(", ");
            }

            sb.Append(")");

            return sb.ToString();
        }

        string ResolveValue(string columnType, object value)
        {
            string strValue = value.ToString().ToLower();
            if (strValue == "null")
                return "NULL";

            switch (columnType)
            {
                case "nvarchar":
                case "nchar":
                {
                    var nvarchar = ResolveVarchars(value);
                    return $"N'{nvarchar}'";
                }

                case "varchar":
                case "char":
                {
                    var varchar = ResolveVarchars(value);
                    return $"'{varchar}'";
                }

                case "datetime":
                {
                    var type = value.GetType();
                    SqlDateTime sqlDateTime = (SqlDateTime) value;
                    var outputDateTime = $"N'{sqlDateTime}'";
                    return outputDateTime;
                }

                case "money":
                {
                    var valueWithDot = ResolveNumbers(value);
                    var output = $"CAST({valueWithDot} AS Money)";
                    return output;
                }

                case "timestamp":
                    return "DEFAULT";

                case "float":
                case "decimal":
                {
                    var valueWithDot = ResolveNumbers(value);
                    return valueWithDot;
                }

                case "bit":
                {
                    var output = ResolveBitValue(strValue);
                    return output;
                }

                default:
                    return value.ToString();
            }

        }

        string ResolveBitValue(string strValue)
        {
            if (strValue == "true")
                return "1";
            return "0";
        }

        string ResolveVarchars(object varcharValue)
        {
            string str = varcharValue.ToString();

            if (str.Contains("'") && !str.Contains("''"))
            {
                string output = str.Replace("'", "''");
                return output;
            }

            return str;
        }

        string ResolveNumbers(object numberValue)
        {
            string str = numberValue.ToString();
            string output = str.Replace(",", ".");
            return output;
        }

        #endregion
    }
}
